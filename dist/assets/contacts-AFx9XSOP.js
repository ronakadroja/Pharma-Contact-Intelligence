import{c as d,E as n,F as s}from"./index-CFmIIdps.js";/**
 * @license lucide-react v0.513.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const y=[["path",{d:"M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z",key:"3c2336"}],["path",{d:"m9 12 2 2 4-4",key:"dzmm74"}]],m=d("badge-check",y);/**
 * @license lucide-react v0.513.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const h=[["path",{d:"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",key:"c2jq9f"}],["rect",{width:"4",height:"12",x:"2",y:"9",key:"mk3on5"}],["circle",{cx:"4",cy:"4",r:"2",key:"bt5ra8"}]],f=d("linkedin",h),u=async r=>{try{const t={};return r&&Object.entries(r).forEach(([a,e])=>{Array.isArray(e)?e.length>0&&(t[a]=e):e!==""&&e!==void 0&&e!==null&&(t[a]=e)}),(await n.get(s("BASE"),{params:t,paramsSerializer:a=>{const e=new URLSearchParams,l=["company_name","department","product_type","person_country","company_country","region"];return Object.entries(a).forEach(([i,c])=>{Array.isArray(c)&&l.includes(i)?c.forEach(p=>{e.append(`${i}[]`,String(p))}):Array.isArray(c)?c.forEach(p=>{e.append(i,String(p))}):e.append(i,String(c))}),e.toString()}})).data}catch(t){throw console.error("Error fetching contacts:",t),t}},E=async r=>{try{return(await n.post(s("CREATE"),r)).data}catch(t){throw console.error("Error adding contact:",t),t}},w=async(r,t)=>{try{return(await n.put(s("UPDATE",r),t)).data}catch(o){throw console.error("Error updating contact:",o),o}},_=async r=>{try{await n.delete(s("DELETE",r))}catch(t){throw console.error("Error deleting contact:",t),t}},A=async(r,t)=>{try{return(await n.patch(s("STATUS",r),{status:t})).data}catch(o){throw console.error("Error updating contact status:",o),o}},S=async r=>{try{return(await n.post(s("REVEAL",r))).data}catch(t){throw console.error("Error revealing contact:",t),t}},b=async()=>{var r;try{const t=s("SAVED");console.log("Attempting to fetch saved contacts from URL:",t);const a=(await n.get(t)).data;if(!a||typeof a!="object")return console.log("Empty or invalid response, returning default structure"),{available_credit:"0",my_list:[]};const e={available_credit:a.available_credit||"0",my_list:Array.isArray(a.my_list)?a.my_list:[]};return console.log("Successfully fetched saved contacts:",{credit:e.available_credit,contactCount:e.my_list.length}),e}catch(t){if(console.error("Error fetching saved contacts:",t),console.error("Failed URL was:",s("SAVED")),t&&typeof t=="object"&&"response"in t&&((r=t.response)==null?void 0:r.status)===200)return console.log("Received 200 status with empty response, treating as empty list"),{available_credit:"0",my_list:[]};throw t}},C=async r=>{try{const t=new FormData;return t.append("file",r),(await n.post(s("BULK_IMPORT"),t,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(t){throw console.error("Error importing contacts:",t),t}};export{m as B,f as L,b as a,E as b,C as c,_ as d,A as e,u as g,S as r,w as u};
