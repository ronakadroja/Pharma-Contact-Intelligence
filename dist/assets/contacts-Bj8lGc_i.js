import{c as l,E as n,F as s}from"./index-C6Z2bi7o.js";/**
 * @license lucide-react v0.513.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const y=[["path",{d:"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z",key:"c2jq9f"}],["rect",{width:"4",height:"12",x:"2",y:"9",key:"mk3on5"}],["circle",{cx:"4",cy:"4",r:"2",key:"bt5ra8"}]],g=l("linkedin",y),m=async t=>{try{const r={};return t&&Object.entries(t).forEach(([a,e])=>{Array.isArray(e)?e.length>0&&(r[a]=e):e!==""&&e!==void 0&&e!==null&&(r[a]=e)}),(await n.get(s("BASE"),{params:r,paramsSerializer:a=>{const e=new URLSearchParams,d=["company_name","department","product_type","person_country","company_country","region"];return Object.entries(a).forEach(([i,c])=>{Array.isArray(c)&&d.includes(i)?c.forEach(p=>{e.append(`${i}[]`,String(p))}):Array.isArray(c)?c.forEach(p=>{e.append(i,String(p))}):e.append(i,String(c))}),e.toString()}})).data}catch(r){throw console.error("Error fetching contacts:",r),r}},f=async t=>{try{return(await n.post(s("CREATE"),t)).data}catch(r){throw console.error("Error adding contact:",r),r}},u=async(t,r)=>{try{return(await n.put(s("UPDATE",t),r)).data}catch(o){throw console.error("Error updating contact:",o),o}},E=async t=>{try{await n.delete(s("DELETE",t))}catch(r){throw console.error("Error deleting contact:",r),r}},w=async(t,r)=>{try{return(await n.patch(s("STATUS",t),{status:r})).data}catch(o){throw console.error("Error updating contact status:",o),o}},_=async t=>{try{return(await n.post(s("REVEAL",t))).data}catch(r){throw console.error("Error revealing contact:",r),r}},A=async()=>{var t;try{const r=s("SAVED");console.log("Attempting to fetch saved contacts from URL:",r);const a=(await n.get(r)).data;if(!a||typeof a!="object")return console.log("Empty or invalid response, returning default structure"),{available_credit:"0",my_list:[]};const e={available_credit:a.available_credit||"0",my_list:Array.isArray(a.my_list)?a.my_list:[]};return console.log("Successfully fetched saved contacts:",{credit:e.available_credit,contactCount:e.my_list.length}),e}catch(r){if(console.error("Error fetching saved contacts:",r),console.error("Failed URL was:",s("SAVED")),r&&typeof r=="object"&&"response"in r&&((t=r.response)==null?void 0:t.status)===200)return console.log("Received 200 status with empty response, treating as empty list"),{available_credit:"0",my_list:[]};throw r}},S=async t=>{try{const r=new FormData;return r.append("file",t),(await n.post(s("BULK_IMPORT"),r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){throw console.error("Error importing contacts:",r),r}};export{g as L,A as a,f as b,S as c,E as d,w as e,m as g,_ as r,u};
